{"version":3,"sources":["bennischwerdtner/typepi/page.cljs"],"mappings":"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","names":["bennischwerdtner.typepi.page/dark-surface-color","bennischwerdtner.typepi.page/dark-lighter","bennischwerdtner.typepi.page/dark-lightest","bennischwerdtner.typepi.page/navajo-white","bennischwerdtner.typepi.page/green-yellow","js/bennischwerdtner","js/bennischwerdtner.typepi","js/bennischwerdtner.typepi.page","js/bennischwerdtner.typepi.page.pi","bennischwerdtner.typepi.page/pi","reagent.core.atom","bennischwerdtner.typepi.page/commands","cljs.core/vec","cljs.core.concat","cljs.core.map","cljs.core/str","cljs.core.range","bennischwerdtner.typepi.page/default-keymap","bennischwerdtner.typepi.page/state","or__5002__auto__","e48698","clojure.edn.read_string","js/localStorage.getItem","js/Error","_","e48697","bennischwerdtner.typepi.page/game-state","js/bennischwerdtner.typepi.page.wobble-anim-state","bennischwerdtner.typepi.page/wobble-anim-state","js/bennischwerdtner.typepi.page.blink-anim-state","bennischwerdtner.typepi.page/blink-anim-state","bennischwerdtner.typepi.page/points","bennischwerdtner.typepi.page/group-by-scheme","coll","scheme","acc","cljs.core/not","cljs.core/seq","grp","cljs.core.conj","cljs.core.sequence","cljs.core.comp","cljs.core.partition_by","cljs.core/first","g","elm","cljs.core/second","cljs.core/vector","cljs.core.drop","cljs.core/count","bennischwerdtner.typepi.page/$button","bennischwerdtner.typepi.page/$idle-cursor","bennischwerdtner.typepi.page/$incorrect-blink","bennischwerdtner.typepi.page/$almost-done","bennischwerdtner.typepi.page/page-forward","state","cljs.core.update","cljs.core/inc","cljs.core.assoc","bennischwerdtner.typepi.page/page-backward","p","x__5087__auto__","y__5088__auto__","cljs.core/dec","p__48705","map__48706","cljs.core/--destructure-map","cljs.core.get","bennischwerdtner.typepi.page/normalize-page","cursor-idx","per-page","p__48707","map__48708","bennischwerdtner.typepi.page/next-pi-idx","page-idx","p__48709","map__48710","bennischwerdtner.typepi.page/normalize-state","s","index","cljs.core.merge","cljs.core/mod","cljs.core.into","cljs.core.repeat","bennischwerdtner.typepi.page/cursor-forward","amount","cljs.core/+","p__48711","map__48712","bennischwerdtner.typepi.page/page-almost-succ?","typed","cljs.core/every?","bennischwerdtner.typepi.page/correct?","pi","k","cljs.core._EQ_","cljs.core.nth","cljs.core/deref","bennischwerdtner.typepi.page/incorrect?","and__5000__auto__","fexpr__48713","p__48714","map__48715","bennischwerdtner.typepi.page/handle-repeat","typed-history","temp__5821__auto__","rep","cljs.core.drop_while","cljs.core/complement","cljs.core/reverse","bennischwerdtner.typepi.page/update-typed","bennischwerdtner.typepi.page/handle-reveal","cljs.core/conj","bennischwerdtner.typepi.page/reveal-many","to-reveal","bennischwerdtner.typepi.page/handle-reveal-group","group-len","bennischwerdtner.typepi.page/reveal-page","bennischwerdtner.typepi.page/handle-back","v","G__48716","cljs.core/pop","p__48717","map__48718","page-revealed?","correct?","incorrect?","G__48719","cljs.core.dissoc","cljs.core.not_EQ_","fexpr__48720","cljs.core/vals","fexpr__48721","bennischwerdtner.typepi.page/play-anim!","ref","play-time","idle-time","cljs.core/reset!","js/setTimeout","bennischwerdtner.typepi.page/set-anim!","G__48722","cljs.core/Keyword","bennischwerdtner.typepi.page/set-wobble-anim!","bennischwerdtner.typepi.page/set-blink-anim!","p__48723","map__48724","bennischwerdtner.typepi.page/page-overview-ui","bennischwerdtner.typepi.page/character-id","idx","p__48725","map__48726","bennischwerdtner.typepi.page/type-area-characters","idle?","grouping-scheme","incorrect-counter","cljs.core.doall","characters","cljs.core.take","characters-rendered","cljs.core.map_indexed","c","incorrect-blink?","G__48728","ui","cljs.core.mapcat","cljs.core/identity","cljs.core.interpose","p__48729","map__48730","vec__48731","bennischwerdtner.typepi.page/firefly","x","y","bennischwerdtner.typepi.page/fireflies","iter__5480__auto__","s__48735","cljs.core/LazySeq","temp__5823__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__48737","cljs.core/chunk-buffer","i__48736","vec__48738","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48734","cljs.core/chunk-rest","vec__48741","cljs.core/cons","cljs.core/rest","e","bennischwerdtner.typepi.lib/entity-update","reached-target?","bennischwerdtner.typepi.lib/distance","bennischwerdtner.typepi.lib/age","bennischwerdtner.typepi.lib/play-sound!","cljs.core.swap_BANG_","cljs.core/update","G__48744","bennischwerdtner.typepi.lib/attracted","bennischwerdtner.typepi.page/spawn-firefly!","ents","cljs.core.repeatedly","bennischwerdtner.typepi.lib/->entity","cljs.core.rand","bennischwerdtner.typepi.lib/rand-on-element","bennischwerdtner.typepi.lib/norm","bennischwerdtner.typepi.page/key-ui","bennischwerdtner.typepi.page/keymap-ui","s__48747","b__48749","i__48748","vec__48750","vec__48753","iter__48746","vec__48760","vec__48763","keymap-keys","cljs.core.juxt","p1__48745#","cljs.core/group-by","cljs.core/val","fexpr__48770","o","cljs.core/with-meta","s__48757","b__48759","i__48758","iter__48756","s__48767","b__48769","i__48768","iter__48766","cljs.core.sort","bennischwerdtner.typepi.lib/keychord-or-key->string","js/scrollTo","cljs.core/assoc","bennischwerdtner.typepi.page/index-jump-ui","by-how-much","btn","p__48771","map__48772","on-click","content","p__48773","map__48774","bennischwerdtner.typepi.page/type-area","idle-timeout","handle-typed","G__48777","fexpr__48776","fexpr__48778","G__48781","fexpr__48780","fexpr__48782","bennischwerdtner.typepi.lib/event->key-chord","cljs.core/constantly","keydown-listener","reagent.core.create_class","js/window.addEventListener","js/window.removeEventListener","idle","js/clearTimeout","map__48783","$base","cljs.core/odd?","bennischwerdtner.typepi.page/bookmark-ui","bks","cljs.core/peek","js/localStorage.setItem","cljs.core.prn_str","s__48785","b__48787","i__48786","vec__48788","iter__48784","vec__48791","bk","bennischwerdtner.typepi.page/set-keybind","kchord","cljs.core/assoc-in","bennischwerdtner.typepi.page/delete-keybind","cljs.core.reduce","km","bennischwerdtner.typepi.lib/key-chord-composed?","js/bennischwerdtner.typepi.page.dialog","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","fexpr__48794","cljs.core/MultiFn","cljs.core.symbol","bennischwerdtner.typepi.page/dialog","what-you-just-pressed","$inacitve","$active","kc","G__48796","fexpr__48795","keyup-listener","_e","bennischwerdtner.typepi.lib/key-chord->printed","bennischwerdtner.typepi.page/ui","fexpr__48797","fexpr__48798","js/localStorage.removeItem","bennischwerdtner.typepi.page/setup","js/fetch","p1__48799#","r","bookmarks","e48800","bennischwerdtner.typepi.lib/current-search-params","zero","js/document","t","dt","G__48806","fexpr__48805","*dt*-orig-val__48807","*dt*-temp-val__48808","bennischwerdtner.typepi.lib/*dt*","bennischwerdtner.typepi.lib/physics-update-2d","bennischwerdtner.typepi.lib/update-entities","js/requestAnimationFrame","animate","js/bennischwerdtner.typepi.page.setup?","bennischwerdtner.typepi.page/setup?","bennischwerdtner.typepi.page/page","reagent.dom.render","cljs.core/chunk-first"],"sourcesContent":["(ns bennischwerdtner.typepi.page\n  (:require [reagent.dom :as rd]\n            [reagent.core :as r]\n            [clojure.edn :as edn]\n            [shadow.css :refer [css] :include-macros true]\n            [bennischwerdtner.typepi.lib :as lib]))\n\n(def dark-surface-color \"#121212\")\n(def dark-lighter \"#1a1a1a\")\n(def dark-lightest \"#454545\")\n\n(def navajo-white \"#ffdead\")\n(def green-yellow \"#adff2f\")\n\n(defonce pi (r/atom \"\"))\n\n(def commands\n  (vec\n   (concat\n    (map str (range 0 10))\n    [:back :reveal :reveal-group :reveal-page])))\n\n(def default-keymap\n  {\".\" :repeat\n   \":\" :reveal-group\n   \";\" :reveal\n   \">\" :reveal-page\n   \"Backspace\" :back\n   \"a\" \"1\"\n   \"b\" \"2\"\n   \"c\" \"3\"\n   \"d\" \"4\"\n   \"e\" \"5\"\n   \"f\" \"6\"\n   \"g\" \"7\"\n   \"h\" \"8\"\n   \"i\" \"9\"\n   \"j\" \"9\"\n   \"k\" \"4\"\n   \"l\" \"2\"\n   \"m\" \"3\"\n   \"n\" \"9\"\n   \"o\" \"0\"\n   \"p\" \"8\"\n   \"q\" \"7\"\n   \"s\" \"6\"\n   \"t\" \"4\"\n   \"u\" \"0\"\n   \"v\" \"1\"\n   \"w\" \"2\"\n   \"x\" \"3\"\n   \"y\" \"5\"\n   \"z\" \"6\"})\n\n(def state\n  (r/atom\n   {:bookmarks []\n    :hide-things?\n    (or (try\n          (edn/read-string\n           (js/localStorage.getItem\n            \"hide-things?\"))\n          (catch js/Error _ false))\n        false)\n    ;; :dialog  :add-key\n    ;; :add-key {:target \"0\"}\n    :cursor-idx 0\n    :grouping-scheme\n    \"aabaabaa\"\n    :incorrect-counter 0\n    :keymap\n    (or\n     (try\n       (edn/read-string\n        (js/localStorage.getItem\n         \"keymap\"))\n       (catch js/Error _))\n     default-keymap)\n    :page :type-pi\n    :page-idx 0\n    :per-page (* 3 (+ 2 1 2 1 2))\n    :typed []\n    :typed-history []}))\n\n(def game-state\n  (r/atom {:entities [ ;; {:pos [(rand 1000) (rand\n                      ;; 1000)]\n                      ;;  :velocity [10 10]\n                      ;;  :kinetic-energy 0.2}\n                      ;; {:pos [(rand 1000) (rand\n                      ;; 1000)]\n                      ;;  :velocity [10 10]\n                      ;;  :kinetic-energy 0.2}\n                      ;; {:pos [100 100]\n                      ;;  :velocity [0 0]\n                      ;;  :lifetime 1\n                      ;;  ;; :kinetic-energy 0\n                      ;;  :forces {:gravity [0 0.1]}}\n                      ]}))\n\n(defonce wobble-anim-state\n  (r/atom :idle))\n(defonce blink-anim-state\n  (r/atom :idle))\n\n(def points (r/atom {:green 0}))\n\n;; -----------\n\n(defn group-by-scheme\n  [coll scheme]\n  (letfn [(grp [acc coll]\n            (if-not (seq coll)\n              acc\n              (grp (conj acc\n                         (sequence\n                          (comp (partition-by first)\n                                (map (fn [g]\n                                       (map (fn [elm]\n                                              (second elm))\n                                            g))))\n                          (map vector scheme coll)))\n                   (drop (count scheme) coll))))]\n    (grp [] coll)))\n\n(def $button (css :text-base :border :p-1 :rounded :border-color-white))\n\n(def $idle-cursor (css {:animation \"blink 3s infinite\"}))\n(def $incorrect-blink\n  (css\n    {:animation \"blink 3s infinite\"\n     :color \"var(--navajo-white)\"}))\n\n(def $almost-done\n  (css {\n        ;; :animation \"blink-border 3s infinite\"\n        :animation \"blink-2 3s infinite\"}))\n\n(defn page-forward\n  [state]\n  (-> state\n      (update :page-idx inc)\n      (assoc :cursor-idx 0)\n      (assoc :typed [])))\n\n(defn page-backward\n  [state]\n  (-> state\n      (update\n       :page-idx\n       (comp\n        (fn [p] (max p 0))\n        dec))\n      (assoc :cursor-idx 0)\n      (assoc :typed [])))\n\n(defn normalize-page\n  [{:as state :keys [cursor-idx per-page]}]\n  (cond (< per-page (inc cursor-idx)) (page-forward state)\n        (< cursor-idx 0) (page-backward state)\n        :else state))\n\n(defn next-pi-idx\n  [{:keys [cursor-idx per-page page-idx]}]\n  (+ (* per-page page-idx) cursor-idx))\n\n(defn normalize-state\n  [{:as s :keys [per-page]}]\n  (let [index (next-pi-idx s)\n        index (max 0 index)]\n    (merge s\n           {:cursor-idx (mod index per-page)\n            :index index\n            :page-idx (int (/ index per-page))\n            :typed\n            (into []\n                  (repeat (mod index per-page) :revealed))\n            :typed-history []})))\n\n\n(defn cursor-forward\n  [state amount]\n  (normalize-state (update state :cursor-idx + amount)))\n\n(defn page-almost-succ?\n  [{:keys [cursor-idx per-page typed]}]\n  (and (< (- per-page 3) (inc cursor-idx))\n       (every? #{:success} typed)))\n\n(declare spawn-firefly!)\n\n(defn correct? [pi k]\n  (= (str (nth pi (next-pi-idx @state))) k))\n\n(defn incorrect? [pi k]\n  (and\n   (#{\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"} k)\n   (not (correct? pi k))))\n\n(declare update-typed)\n\n(defn handle-repeat\n  [{:as state :keys [typed-history]} pi]\n  (if-let [rep (first (drop-while\n                       (complement\n                        (into #{} (map str (range 0 10))))\n                       (reverse typed-history)))]\n    (update-typed state pi rep)\n    state))\n\n(defn handle-reveal [state]\n  (update state :typed conj\n          :success\n          ;; :revealed\n          ))\n\n(defn reveal-many\n  [state to-reveal]\n  (-> state\n      (update :typed\n              (fn [typed]\n                (into typed (repeat to-reveal :revealed))))\n      (update :cursor-idx + to-reveal)))\n\n(defn handle-reveal-group\n  [state]\n  (let [group-len (count (:grouping-scheme state))]\n    (reveal-many state\n                 (- group-len\n                    (mod (:cursor-idx state) group-len)))))\n\n(defn reveal-page\n  [state]\n  (reveal-many state\n               (- (:per-page state)\n                  (mod (:cursor-idx state)\n                       (:per-page state)))))\n\n(defn handle-back\n  [state]\n  (-> state\n      (update :cursor-idx dec)\n      (update :typed\n              (fn [v]\n                (case v\n                  [] []\n                  (pop v))))))\n\n(defn update-typed\n  [{:as state\n    :keys [per-page page-idx page-revealed?]}\n   pi k]\n  (let [correct? (correct? pi k)\n        incorrect? (incorrect? pi k)\n        state\n        (cond-> state\n          (= k :back) (handle-back)\n          (:page-revealed? state) (dissoc :page-revealed?)\n          (not= :repeat k) (update :typed-history conj k)\n          (= :repeat k) (handle-repeat pi)\n          (or correct? (= k :reveal))\n          (update :cursor-idx inc)\n          (or correct? (= k :reveal))\n          (assoc :incorrect-counter 0)\n          (= k :reveal) (update :typed conj :revealed)\n          (= k :reveal-group) (handle-reveal-group)\n          (= k :reveal-page) (reveal-page)\n\n          correct? (update :typed conj :success)\n\n          incorrect?\n          (update :incorrect-counter inc)\n\n\n          ((into #{} (vals (:keymap state))) k)\n          (normalize-page))]\n    (if (and (#{:reveal :reveal-group :reveal-page} k)\n             (zero? (:cursor-idx state))\n             (not page-revealed?))\n      (-> state\n          (assoc :cursor-idx per-page\n                 :page-revealed? true\n                 :typed (into [] (repeat per-page :revealed))\n                 :typed-history []\n                 :page-idx page-idx))\n      state)))\n\n(defn play-anim!\n  [ref play-time idle-time]\n  (reset! ref :playing)\n  (js/setTimeout\n   (fn []\n     (reset! ref :timeout)\n     (js/setTimeout (fn [] (reset! ref :idle)) idle-time))\n   play-time))\n\n(defn set-anim!\n  [ref play-time idle-time]\n  (case @ref\n    :playing nil\n    :timeout nil\n    :idle (play-anim! ref play-time idle-time)))\n\n(defn set-wobble-anim! [] (set-anim! wobble-anim-state 100 50))\n\n(defn set-blink-anim! []\n  (set-anim! blink-anim-state 1200 50))\n\n(defn page-overview-ui\n  [{:as state :keys [cursor-idx per-page page-idx]}]\n  [:div\n   {:class (css {:max-width \"15rem\" :min-width \"15rem\"}\n                :flex\n                :flex-col :border\n                :p-2 :gap-2\n                :px-4 {:border-color \"white\"})}\n   [:div \"page: \" [:span {:class (css :text-3xl)} page-idx]\n    [:span {:class (css :text-sm)} \" / \"\n     (int (/ (count @pi) per-page))]]\n   [:div [:span {:class (css :text-sm)} \"index: \"]\n    [:span {:class (css :mx-2 :text-5xl)}\n     (next-pi-idx state)]]\n   [:div {:class (css :text-sm)} \"cursor: \" cursor-idx]])\n\n(defn character-id [idx]\n  (str \"type-area-character-\" idx))\n\n(defn type-area-characters\n  [{:keys [pi idle? grouping-scheme cursor-idx per-page\n           incorrect-counter\n           page-idx typed]}]\n  [:div#number-text\n   {:class (css :tracking-widest :text-3xl [:xl :text-5xl])}\n   (doall\n     (let [characters (take per-page\n                            (drop (* page-idx per-page) pi))\n           characters-rendered\n             (map-indexed\n               (fn [idx c]\n                 (let [incorrect-blink?\n                       (when (= cursor-idx idx)\n                         (< 2 incorrect-counter))]\n                   (if incorrect-blink?\n                     [:span\n                      {:id (str \"type-area-character-\" idx)\n                       :style {:position :relative}}\n                      [:span\n                       {:class\n                        (css\n                          :absolute\n                          :underline\n                          {:color \"transparent\"\n                           :text-decoration-color\n                           \"var(--navajo-white)\"})}\n                       c]\n                      [:span\n                       {:class\n                        [(str\n                          (when (= cursor-idx idx)\n                            (str\n                             \" \"\n                             (when incorrect-blink?\n                               $incorrect-blink))))]\n\n                        :key idx}\n                       c]]\n                     [:span\n                      {:class [(str\n                                ;; (css :transition-all)\n                                \" \" (case (get typed idx :no)\n                                      :wrong \"u-error\"\n                                      :revealed \"u-color-default\"\n                                      :no\n                                      ;; \"u-color-default\"\n                                      (css {:color \"transparent\"})\n                                      :success \"u-success\")\n                                \" \" (when (= cursor-idx idx)\n                                      (str (css :underline\n                                                {:text-decoration-color\n                                                 \"var(--navajo-white)\"})\n                                           \" \"\n                                           (when idle? $idle-cursor))))]\n                       :id (str \"type-area-character-\" idx)\n                       :key idx} c])))\n               characters)]\n       (map-indexed\n         (fn [idx ui] [:span {:key idx} ui])\n         (mapcat identity\n           (mapcat identity\n             (interpose [[[:span \"\u2009\u2009\"]]]\n               (map (fn [grp] (interpose [[:span \"\u2009\"]] grp))\n                 (group-by-scheme characters-rendered\n                                  grouping-scheme))))))))])\n\n(defn firefly\n  [{:keys [] [x y] :pos}]\n  [:div\n   {:class (css :absolute\n                :p-2\n                ;; {:height \"1rem\" :width \"2.5rem\"}\n                :min-w-0\n                :text-center :text-black\n                :rounded-full \"c-background-success\")\n    :style {:left x :top y}}])\n\n(defn fireflies\n  []\n  [:<>\n   (doall (for [[idx e] (map-indexed vector\n                                     (:entities\n                                      @game-state))]\n            ^{:key idx} [firefly e]))\n   [:div {:class (css :flex :justify-center)}\n    [:div {:class (css :relative :flex :justify-center)}\n     [:div#green-points\n      {:class\n       [(css :absolute\n             :p-3\n             :pt-4\n             :flex\n             :items-center\n             :justify-center\n             :transition-all\n             {:height \"3rem\"\n              :top \"2rem\"\n              :width \"3rem\"}\n             :min-w-0\n             :text-center\n             :text-black\n             :rounded-full \"c-background-success\")\n        (when (= :playing @wobble-anim-state)\n          \"u-wobble\")]}\n      (if\n          (< 1000 (:green @points))\n          (str (int (/ (:green @points) 1000)) \"k\")\n          (:green @points))]]]])\n\n(defmethod lib/entity-update :firefly\n  [e state]\n  (let [reached-target? (< (lib/distance (:pos e)\n                                         (:green-points-position\n                                          state))\n                           40)]\n    (when reached-target?\n      (set-wobble-anim!)\n      (when (< 300 (lib/age e))\n        (lib/play-sound! \"757612__qubodup__pop-sound.wav\" 0.5))\n      (swap! points update :green inc))\n    (cond-> e\n      (< 500 (lib/age e) 1000) (lib/attracted \"green-points\" 0.5)\n      (< 1000 (lib/age e)) (lib/attracted \"green-points\" 0.4)\n      reached-target? (assoc :kill? true))))\n\n(defn spawn-firefly!\n  [state]\n  (update\n   state\n   :entities\n   (fn [ents]\n     (into ents\n           (repeatedly\n            1\n            (fn []\n              (lib/->entity\n               {:firefly? true\n                :kind :firefly\n                :forces {:gravity [0\n                                   (+ 0.1 (rand 0.05))]}\n                :kinetic-energy 100\n                :pos (lib/rand-on-element \"number-text\")\n                :velocity [(lib/norm 0 6000)\n                           (lib/norm -1000 1000)]})))))))\n\n(defn key-ui\n  [k]\n  [:span\n   {:class (css \"u-background-lightest\"\n                :rounded\n                :p-1\n                :text-center\n                {:min-width \"2rem\"}\n                :cursor-pointer)\n    :on-click (fn [])\n    :tabIndex \"0\"} k])\n\n(defn keymap-ui\n  []\n  [:div\n   {:class (css :flex\n                :flex-col\n                :gap-2\n                :border-2\n                :border-white\n                {:max-width \"30rem\"}\n                :p-4)}\n   (doall\n    (for [[idx [v keymap-keys]]\n          (map-indexed\n           vector\n           (map (juxt first\n                      (comp #(map first %) second))\n                (map (juxt identity\n                           (group-by val (@state :keymap)))\n                     commands)))]\n      ^{:key idx}\n      [:div {:class (css :justify-between :w-full :flex)}\n       [:span\n        (doall\n         ^{:key kidx}\n         (doall\n          (map-indexed\n           (fn [idx o] (with-meta o {:key idx}))\n           (interpose [:span \", \"]\n                      (concat\n                       (for [k (sort\n                                (map\n                                 lib/keychord-or-key->string\n                                 keymap-keys))]\n                         [key-ui k])\n                       [[:span\n                         {:class (css :border\n                                      :rounded\n                                      :text-base\n                                      :p-1\n                                      :text-center\n                                      {:min-width \"2rem\"}\n                                      :cursor-pointer)\n                          :on-click (fn []\n                                      (js/scrollTo 0 0)\n                                      (swap! state assoc\n                                             :dialog :add-key\n                                             :add-key {:target v}))\n                          :tabIndex \"0\"} \"+\"]])))))]\n       [:span v]]))])\n\n(defn index-jump-ui\n  [_]\n  (let [by-how-much (r/atom 100)]\n    (fn [s]\n      [:div\n       {:class (css :mt-2\n                    {:max-width \"15rem\"\n                     :min-width \"15rem\"})}\n       [:div {:class (css :flex :gap-2 :items-center)}\n        (let [btn (fn [{:keys [on-click]} content]\n                    [:button\n                     {:class (css :rounded\n                                  :p-1\n                                  :border\n                                  :border-white\n                                  :hover\n                                  {:min-height \"2.5rem\"\n                                   :min-width \"3rem\"}\n                                  {:border-color\n                                     \"var(--navajo-white)\"})\n                      :on-click on-click} content])]\n          (doall\n            (map-indexed\n              (fn [idx v] (with-meta v {:key idx}))\n              [(btn {:on-click (fn []\n                                 (swap! state cursor-forward\n                                   (- @by-how-much)))}\n                    [:div {:class (css :text-4xl)} \"\u2190\"])\n               [:button\n                {:class (css :rounded\n                             :p-1\n                             :flex\n                             :items-center\n                             :justify-center\n                             :border\n                             :border-white\n                             :hover\n                             :text-center\n                             {:min-height \"2.5rem\"\n                              :min-width \"5rem\"}\n                             {:border-color\n                                \"var(--navajo-white)\"})\n                 :on-click (fn []\n                             (swap! by-how-much\n                               {100 1000\n                                760 100\n                                1000 760}))}\n                @by-how-much]\n               (btn {:on-click (fn []\n                                 (swap! state cursor-forward\n                                   @by-how-much))}\n                    [:div {:class (css :text-4xl)} \"\u2192\"])])))]])))\n\n(defn type-area\n  [{:keys []}]\n  (let [idle? (r/atom false)\n        idle-timeout (r/atom nil)\n        handle-typed\n        (fn [e]\n          (cond\n            (:adding-key? @state)\n            nil\n            :else\n            (when-let [pi @pi]\n              (let [k (or\n                       ((@state :keymap) (str (.-key e)))\n                       ((@state :keymap) (lib/event->key-chord e))\n                       (str (.-key e)))]\n                (when (correct? pi k)\n                  (set-blink-anim!)\n                  (lib/play-sound! \"plop.mp3\" 1)\n                  (swap! game-state spawn-firefly!))\n                (swap! state update-typed pi k)\n                (swap! idle? (constantly false))))))\n        keydown-listener\n        (fn [e]\n          (handle-typed e)\n          #_(if (= (.-key e) \"Tab\")\n              nil\n              (when @active?\n                (handle-typed (.-key e))\n                (.preventDefault e))))]\n    (r/create-class\n     {:component-did-mount\n      (fn []\n        (js/window.addEventListener \"keydown\" keydown-listener))\n      :component-will-unmount\n      (fn []\n        (js/window.removeEventListener \"keydown\" keydown-listener))\n      :name :type-area\n      :reagent-render\n      (fn []\n        (when-let [idle @idle-timeout]\n          (js/clearTimeout idle))\n        (js/setTimeout (fn []\n                         (swap! idle? (constantly true)))\n                       1000)\n        (let [$base (css \"u-background-lighter\"\n                         :shadow\n                         {:max-width \"95%\"\n                          ;; :min-width \"50%\"\n                          }\n                         {:min-height \"4rem\"}\n                         :rounded\n                         :p-6\n                         :border-2\n                         {:border-color \"transparent\"}\n                         :rounded)\n              {:keys [page-idx cursor-idx per-page\n                      typed]}\n              @state]\n          [:div\n           {:class [$base\n                    (when (page-almost-succ? @state)\n                      $almost-done)\n                    (when (= :playing @blink-anim-state)\n                      \"u-blink-green-anim\")]\n            :tabIndex \"0\"}\n           [:div {:class (css :relative)}\n            [:div\n             {:class (css :absolute\n                          {:left \"2rem\" :top \"-8rem\"})}\n             [:div\n              {:class [(css :text-6xl\n                            {:transition \"0.3s all\"})\n                       (when (odd? cursor-idx)\n                         (css\n                          {:color\n                           \"var(--green-yellow)\"}))]}\n              \"\u03c0\"]]]\n           [type-area-characters\n            (let [s @state]\n              {:cursor-idx cursor-idx\n               :grouping-scheme (:grouping-scheme s)\n               :incorrect-counter (:incorrect-counter s)\n               :idle @idle?\n               :page-idx page-idx\n               :per-page per-page\n               :pi @pi\n               :typed typed})]\n\n           [:div {:class (css :relative)}\n            [:div\n             {:class (css :absolute\n                          {:bottom \"-5rem\" :left \"-1rem\"}\n                          :text-3xl)} page-idx]]]))})))\n\n\n(defn bookmark-ui\n  []\n  [:div {:class (css :items-center :flex :gap-2)}\n   [:div\n    {:tabIndex \"0\"\n     :class\n     (css :flex\n          ;; $button\n          :p-1\n          :rounded\n\n          :my-1 :cursor-pointer\n          :max-w-fit {:background-color\n                      \"var(--navajo-white)\"\n                      ;; :border-color\n                      ;; \"var(--navajo-white)\"\n                      :color \"black\"})\n     :on-click\n     (fn []\n       (swap! state update\n              :bookmarks\n              (fn [bks]\n                (if-not\n                    (= (next-pi-idx @state) (peek bks))\n                    (conj bks (next-pi-idx @state))\n                    bks)))\n       (js/localStorage.setItem\n        \"bookmarks\"\n        (prn-str (:bookmarks @state))))}\n    \"bookmark\"]\n   [:div {:class (css :m-1 :flex :gap-2)}\n    (doall (for [[idx bk] (map-indexed vector\n                                       (:bookmarks @state))]\n             [:div\n              {:class (css :text-sm\n                           :flex :items-center\n                           :justify-between :cursor-pointer\n                           :p-1 :rounded-full\n                           :hover {:background-color\n                                   \"var(--navajo-white)\"\n                                   :color \"black\"})\n               :key idx\n               :on-click (fn []\n                           (swap! state cursor-forward\n                                  (- bk (next-pi-idx @state))))\n               :tabIndex \"0\"}]))]])\n\n\n(defn set-keybind\n  [state kchord]\n  (-> state\n      (assoc-in [:keymap kchord] (:target (:add-key state)))\n      (dissoc :add-key)\n      (dissoc :dialog)))\n\n(defn delete-keybind\n  [state kchord]\n  (->\n    (reduce\n      (fn [state kchord]\n        (update state :keymap (fn [km] (dissoc km kchord))))\n      state\n      (concat [kchord]\n              (when-not (lib/key-chord-composed? kchord)\n                [(:key kchord)])))\n    (dissoc :add-key)\n    (dissoc :dialog)))\n\n(defmulti dialog (fn [k _] k))\n\n(defmethod dialog :add-key\n  [_ _]\n  (let [what-you-just-pressed (r/atom nil)\n        $inacitve (css :border-transparent)\n        $active (css :border-white)\n        keydown-listener\n        (fn [e]\n          (let [kc (lib/event->key-chord e)]\n            (when-not\n                (#{\"Alt\" \"Meta\" \"Control\" \"Shift\"} (:key kc))\n              (reset!\n                 what-you-just-pressed\n                 (lib/event->key-chord e)))))\n        keyup-listener (fn [_e]\n                         (when @what-you-just-pressed\n                           (swap! state set-keybind\n                                  @what-you-just-pressed)\n                           (js/localStorage.setItem\n                            \"keymap\"\n                            (prn-str (:keymap @state)))))]\n    (r/create-class\n     {:component-did-mount\n      (fn []\n        (js/window.addEventListener \"keydown\"\n                                    keydown-listener)\n        (js/window.addEventListener \"keyup\"\n                                    keyup-listener))\n      :component-will-unmount\n      (fn []\n        (js/window.removeEventListener \"keydown\"\n                                       keydown-listener)\n        (js/window.removeEventListener \"keyup\"\n                                       keyup-listener))\n      :name :type-area\n      :reagent-render\n      (fn [_ s] [:div\n                 {:class [\"u-background-lighter\"\n                          (css :p-3 :border\n                               :flex :items-center\n                               :justify-center :flex-col)\n                          (if @what-you-just-pressed\n                            $active\n                            $inacitve)]}\n                 [:div \"Press to asign \"\n                  [:strong\n                   {:class\n                    (css :font-extrabold)}\n                   (-> s :add-key :target)]]\n                 [:div\n                  {:class (css {:min-height \"6rem\"})}\n                  (when @what-you-just-pressed\n                    [:div\n                     {:class (css :justify-center :flex\n                                  :items-center\n                                  :flex-col)}\n                     [:div\n                      (lib/key-chord->printed\n                       @what-you-just-pressed)]\n                     [:div \"release to assign\"]])]])})))\n\n(defmethod dialog :delete-key\n  [_ _]\n  (let [what-you-just-pressed (r/atom nil)\n        $inacitve (css :border-transparent)\n        $active (css :border-white)\n        keydown-listener (fn [e]\n                           (reset! what-you-just-pressed\n                                   (lib/event->key-chord e)))\n        keyup-listener (fn [_e]\n                         (when @what-you-just-pressed\n                           (swap! state\n                                  delete-keybind\n                                  @what-you-just-pressed)\n                           (js/localStorage.setItem\n                            \"keymap\"\n                            (prn-str (:keymap @state)))))]\n    (r/create-class\n     {:component-did-mount\n      (fn []\n        (js/window.addEventListener \"keydown\"\n                                    keydown-listener)\n        (js/window.addEventListener \"keyup\"\n                                    keyup-listener))\n      :component-will-unmount\n      (fn []\n        (js/window.removeEventListener \"keydown\"\n                                       keydown-listener)\n        (js/window.removeEventListener \"keyup\"\n                                       keyup-listener))\n      :name :type-area\n      :reagent-render\n      (fn [_ s]\n        [:div\n         {:class [\"u-background-lighter\"\n                  (css :p-3 :border\n                       :flex :items-center\n                       :justify-center :flex-col)\n                  (if @what-you-just-pressed\n                    $active\n                    $inacitve)]} [:div \"Press to delete\"]\n         [:div {:class (css {:min-height \"6rem\"})}\n          (when @what-you-just-pressed\n            [:div\n             {:class (css :justify-center :flex\n                          :items-center :flex-col)}\n             [:div\n              (lib/key-chord->printed\n               @what-you-just-pressed)]\n             [:div \"release to delete\"]])]])})))\n\n\n(defn ui\n  []\n  [:div\n   [:div {:class (css :flex :justify-center)}\n    [:h1 {:class (css :mt-8 :font-bold)} \"Type PI\"]]\n   [fireflies]\n   [:div {:class (css :flex :flex-col :gap-16)}\n    [:div\n     {:class (css {:min-height \"50vh\"}\n                  :flex\n                  :flex-col :items-center\n                  :justify-center :w-full)}\n     (if (:dialog @state)\n       [dialog (:dialog @state) @state]\n       [type-area])]\n    [:div\n     {:class (css :flex :gap-2 :w-full :justify-between)}\n     [:div {:class (css :ml-20)}\n      [:button\n       {:on-click (fn []\n                    (swap! state assoc\n                      :hide-things?\n                      (not (@state :hide-things?)))\n                    (js/localStorage.setItem\n                      \"hide-things?\"\n                      (prn-str (@state :hide-things?))))}\n       (if (:hide-things? @state)\n         \"\ud83d\udc40 show elements\"\n         \"\ud83d\udc40 hide elements\")]\n      (when-not (:hide-things? @state) [bookmark-ui])\n      [page-overview-ui @state]\n      (when-not (:hide-things? @state)\n        [index-jump-ui @state])\n      (when-not (:hide-things? @state)\n        [:div\n         {:class (css :cursor-pointer\n                      :border :border-white\n                      :max-w-fit :p-1\n                      :rounded {:margin-top \"40vh\"})\n          :on-click (fn []\n                      (swap! state assoc :bookmarks [])\n                      (js/localStorage.removeItem\n                        \"bookmarks\"))\n          :tabIndex \"0\"} \"delete bookmarks\"])]\n     [:div {:class (css :w-full :flex :justify-end)}\n      [:div\n       {:class (css {:margin-right \"25vw\"\n                     :min-width \"20rem\"})}\n       (when-not (:hide-things? @state)\n         [:div\n          {:class\n           (css :flex :flex-col :gap-2\n                {:min-width \"25rem\"})}\n          [:div \"keymap\"]\n          [keymap-ui]\n          [:div\n           {:class (css :flex :w-full :items-center :gap-2)}\n           [:button\n            {:class (css :rounded :p-1\n                         :w-full\n                         :border :border-white)\n             :on-click\n             (fn []\n               (js/scrollTo 0 0)\n               (swap! state assoc :dialog :delete-key))}\n            \"Delete a key\"]\n           [:button\n            {:class (css :rounded :p-1\n                         :w-full\n                         :border :border-white)\n             :on-click\n             (fn []\n               (swap! state assoc :keymap default-keymap)\n               (js/localStorage.removeItem \"keymap\"))}\n            \"Reset keymap\"]]])]]]]])\n\n\n;; -----------------------------------------\n\n(defn setup\n  []\n  (-> (js/fetch \"pi.txt\")\n      (.then #(.. % text))\n      (.then (fn [r] (reset! pi r))))\n  (when-let [bookmarks (js/localStorage.getItem\n                         \"bookmarks\")]\n    (swap! state assoc\n      :bookmarks\n      (try (edn/read-string bookmarks)\n           (catch js/Error _ []))))\n  (when-let [idx (:idx (lib/current-search-params))]\n    (swap! state cursor-forward idx))\n  (let [zero (atom (.. js/document -timeline -currentTime))]\n    (letfn [(animate [t]\n              (let [dt (/ (- t @zero) 1000)]\n                (reset! zero t)\n                (when (#{:type-pi} (:page @state))\n                  (swap! game-state update\n                    :entities\n                    (fn [ents]\n                      (binding [lib/*dt* dt]\n                        (-> ents\n                            (lib/physics-update-2d dt)\n                            (lib/update-entities dt)))))))\n              (js/requestAnimationFrame animate))]\n      (js/requestAnimationFrame animate)))\n  :setup)\n\n;; -------------------------------------------\n\n(defonce setup? (setup))\n\n(defn ^:dev/after-load page\n  []\n  (rd/render [ui] (.getElementById js/document \"app\")))\n\n(comment\n  (apply str (take 50 (drop 760 @pi)))\n  \"49999998372978049951059731732816096318595024459455\")\n"]}