{"version":3,"sources":["bennischwerdtner/typepi/lib.cljs"],"mappings":"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","names":["bennischwerdtner.typepi.lib/ascending","cljs.core/compare","bennischwerdtner.typepi.lib/descending","a","b","var_args","G__48658","bennischwerdtner.typepi.lib/by","js/Error","k","bennischwerdtner.typepi.lib.by","c","G__48659","G__48660","bennischwerdtner.typepi.lib/then","comparator1","comparator2","r","bennischwerdtner.typepi.lib/v*","cljs.core/coll?","cljs.core/vec","cljs.core.map","cljs.core/*","cljs.core.repeat","bennischwerdtner.typepi.lib/v+","cljs.core/+","bennischwerdtner.typepi.lib/v-","bennischwerdtner.typepi.lib/normalize-vector","v","len","Math/sqrt","cljs.core.reduce","p1__48661#","p1__48662#","bennischwerdtner.typepi.lib/vector-len","p1__48663#","bennischwerdtner.typepi.lib/play-sound!","path","volume","elm","or__5002__auto__","js/document","js/document.createElement","js/document.body.appendChild","cljs.core/not","bennischwerdtner.typepi.lib/->entity","opts","cljs.core.merge","js/Date","bennischwerdtner.typepi.lib/age","e","bennischwerdtner.typepi.lib/gaussianRandish","acc","_","Math/random","cljs.core.range","bennischwerdtner.typepi.lib/norm","mean","std","p__48664","map__48665","cljs.core/--destructure-map","cljs.core.get","bennischwerdtner.typepi.lib/brownian-motion","kinetic-energy","acceleration","dt","cljs.core.assoc","bennischwerdtner.typepi.lib/apply-forces","cljs.core.update","f","cljs.core/vals","bennischwerdtner.typepi.lib/element-position-1","id","rect","bennischwerdtner.typepi.lib/rand-on-element","cljs.core.rand","bennischwerdtner.typepi.lib/attracted","force","diff","cljs.core/assoc-in","bennischwerdtner.typepi.lib/physics-update-2d","entities","cljs.core.doall","iter__5480__auto__","s__48667","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__48669","cljs.core/chunk-buffer","i__48668","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48666","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","G__48670","G__48671","bennischwerdtner.typepi.lib/distance","p1__48672#","js/bennischwerdtner","js/bennischwerdtner.typepi","js/bennischwerdtner.typepi.lib","js/bennischwerdtner.typepi.lib.entity-update","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","fexpr__48673","cljs.core/MultiFn","cljs.core.symbol","bennischwerdtner.typepi.lib/entity-update","x","bennischwerdtner.typepi.lib/update-entities","state","s__48676","b__48678","i__48677","iter__48675","G__48679","G__48680","p1__48674#","and__5000__auto__","bennischwerdtner.typepi.lib/current-search-params","cljs.core.into","cljs.core.js__GT_clj","js/URLSearchParams","js/location","cljs.core.comp","p__48681","vec__48682","cljs.core.nth","cljs.core.keyword","bennischwerdtner.typepi.lib/event->key-chord","key","alt-key?","ctrl-key?","shift-key?","meta-key?","bennischwerdtner.typepi.lib/key-chord-composed?","kc","bennischwerdtner.typepi.lib/key-chord->printed","keys-and-names","cljs.core.apply","cljs.core/str","cljs.core.interpose","s__48686","b__48688","i__48687","vec__48689","iter__48685","vec__48692","n","bennischwerdtner.typepi.lib/keychord-or-key->string","cljs.core/map?","cljs.core/chunk-first"],"sourcesContent":["(ns bennischwerdtner.typepi.lib)\n\n(def ^:dynamic *dt*)\n\n(def ascending compare)\n\n(def descending (fn [a b] (compare b a)))\n\n(defn by\n  ([k] (by k ascending))\n  ([k c] (fn [a b] (c (k a) (k b)))))\n\n(defn then\n  [comparator1 comparator2]\n  (fn [a b]\n    (let [r (comparator1 a b)]\n      (if (zero? r) (comparator2 a b) r))))\n\n(defn v* [a b]\n  (cond\n    (and (coll? a) (coll? b))\n    (vec (map * a b))\n    (coll? a)\n    (vec (map * a (repeat b)))\n    (coll? b)\n    (vec (map * b (repeat a)))\n    :else (* a b)))\n\n(defn v+ [a b]\n  (cond\n    (and (coll? a) (coll? b))\n    (vec (map + a b))\n    (coll? a)\n    (vec (map + a (repeat b)))\n    (coll? b)\n    (vec (map + b (repeat a)))\n    :else (+ a b)))\n\n\n(defn v- [a b]\n  (v+ a (v* -1 b)))\n\n(defn normalize-vector\n  [v]\n  (let [len (Math/sqrt (reduce + (map #(* % %) v)))]\n    (if (zero? len) [0 0] (vec (map #(/ % len) v)))))\n\n(defn vector-len [v]\n  (Math/sqrt (reduce + (map #(* % %) v))))\n\n(defn play-sound! [path volume]\n  (let [elm\n        (or\n         (.getElementById js/document (str \"audio-\" path))\n         (let [elm (js/document.createElement \"audio\")]\n           (set! (.-id elm) (str \"audio-\" path))\n           (set! (.-src elm) path)\n           (set! (.-type elm) \"audio/mpeg\")\n           (set! (.-volume elm) volume)\n           (js/document.body.appendChild elm)\n           elm))]\n    (when\n        (not (.-paused elm))\n      (set! (.-currentTime elm) 0))\n    (set! (.-volume elm) volume)\n    (.. elm (play))))\n\n;; -------------------------------\n;; physics game stuff\n\n(defn ->entity [opts]\n  (merge\n   {:entity? true\n    :spawn-time (js/Date.)}\n   opts))\n\n(defn age [e]\n  (- (js/Date.) (:spawn-time e)))\n\n(defn gaussianRandish\n  []\n  (- (/ (reduce (fn [acc _] (+ acc (Math/random)))\n                0\n                (range 7))\n        7)\n     (/ 1 2)))\n\n(defn norm\n  [mean std]\n  (+ mean (* std (gaussianRandish))))\n\n(defn brownian-motion\n  [{:as e :keys [kinetic-energy acceleration] :or {acceleration 0}} dt]\n  (assoc e\n    :acceleration (v+ acceleration\n                      [(* kinetic-energy (norm 0 1) dt 20)\n                       (* kinetic-energy (norm 0 1) dt 20)])))\n\n(defn apply-forces\n  [e dt]\n  (update e\n          :acceleration\n          (fn [a]\n            (v+\n             a\n             (v*\n              (* 1000 62.5 dt)\n              (reduce (fn [acc f] (v+ acc f))\n                      (vals (:forces e))))))))\n\n(def element-position-1\n  (fn [id]\n    (let [rect (.. (.getElementById js/document id)\n                   getBoundingClientRect)]\n      [(+ (.. rect -x) (/ (.. rect -width) 2))\n       (+ (.. rect -y) (/ (.. rect -height) 2))])))\n\n(defn rand-on-element [id]\n  (let [rect (.. (.getElementById js/document id)\n                 getBoundingClientRect)]\n    [(+ (.. rect -x) (rand (.. rect -width)))\n     (+ (.. rect -y) (rand (.. rect -height)))]))\n\n(defn attracted\n  [e id force]\n  (let [diff (v- (element-position-1 id) (:pos e))\n        len (vector-len diff)]\n    (assoc-in e\n              [:forces [:attracted id]]\n              (v* (normalize-vector diff)\n                  force))))\n\n(defn physics-update-2d\n  [entities dt]\n  (doall (for [e entities]\n           (cond-> e\n             (:acceleration e)\n             (update :velocity v+ (v* (:acceleration e) dt))\n             (:acceleration e)\n             (update :acceleration v* (- 1 (* dt 62.5 0.1)))\n             (:velocity e) (update :pos v+ (v* (:velocity e) dt))\n             (:velocity e)\n             (update :velocity v* (- 1 (* dt 62.5 0.1)))\n             (:kinetic-energy e) (brownian-motion dt)\n             true (apply-forces dt)))))\n\n(defn distance [a b]\n  (Math/sqrt (reduce + (map #(* % %) (v- a b)))))\n\n(defmulti entity-update :kind)\n\n(defmethod entity-update :default [x] x)\n\n(defn update-entities\n  [entities dt]\n  (let [state {:green-points-position\n               (element-position-1 \"green-points\")}]\n    (doall\n     (for [e entities\n           :when (not (:kill? e))]\n       (do (cond-> e\n             :always (entity-update state)\n             (:lifetime e) (update :lifetime #(- % dt))\n             (and (:lifetime e) (< (:lifetime e) 0))\n             (assoc :kill? true)))))))\n\n\n(defn current-search-params\n  []\n  (into {}\n        (->> (js->clj (into []\n                            (.. (js/URLSearchParams.\n                                 (.-search js/location))\n                                entries)))\n             (map (comp (fn [[k v]] [(keyword k) v]))))))\n\n;; ---------------------------------------\n\n;; isTrusted\n;; :\n;; true\n;; altKey\n;; :\n;; false\n;; bubbles\n;; :\n;; true\n;; cancelBubble\n;; :\n;; false\n;; cancelable\n;; :\n;; true\n;; charCode\n;; :\n;; 0\n;; code\n;; :\n;; \"MetaRight\"\n;; composed\n;; :\n;; true\n;; ctrlKey\n;; :\n;; false\n;; currentTarget\n;; :\n;; null\n;; defaultPrevented\n;; :\n;; false\n;; detail\n;; :\n;; 0\n;; eventPhase\n;; :\n;; 0\n;; isComposing\n;; :\n;; false\n;; key\n;; :\n;; \"Meta\"\n;; keyCode\n;; :\n;; 91\n;; location\n;; :\n;; 0\n;; metaKey\n;; :\n;; true\n;; repeat\n;; :\n;; false\n;; returnValue\n;; :\n;; true\n;; shiftKey\n;; :\n;; false\n\n(defn event->key-chord\n  [e]\n  (let [key (.-key e)\n        ;; code (.-code e)\n        alt-key? (.-altKey e)\n        ctrl-key? (.-ctrlKey e)\n        shift-key? (.-shiftKey e)\n        meta-key? (.-metaKey e)\n        ;; key-code (.-keyCode e)\n        ;; repeat? (.-repeat e)\n        ]\n    {:key key\n     :alt-key? alt-key?\n     :ctrl-key? ctrl-key?\n     :shift-key? shift-key?\n     :meta-key? meta-key?}))\n\n(defn key-chord-composed?\n  [kc]\n  (or (:alt-key? kc)\n      (:ctrl-key? kc)\n      (:shift-key? kc)\n      (:meta-key? kc)))\n\n(defn key-chord->printed\n  [kc]\n  (let [keys-and-names\n        [[:alt-key? \"Alt\"] [:ctrl-key? \"Ctrl\"]\n         [:shift-key? \"Shift\"] [:meta-key? \"Meta\"]\n         [:key (:key kc)]]]\n    (apply str\n           (interpose \" + \"\n                      (for [[k n] keys-and-names\n                            :when (kc k)]\n                        n)))))\n\n(defn keychord-or-key->string [kc]\n  (cond\n    (map? kc)\n    (key-chord->printed kc)\n    :else\n    (str kc)))\n"]}